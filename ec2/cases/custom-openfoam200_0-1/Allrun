#!/bin/bash

#--------------------------------------------------------------------------------------
cd ${0%/*} || exit 1    # run from this directory
a_cur_dir=`pwd`

source ${WM_PROJECT_DIR}/bin/tools/RunFunctions # source tutorial run functions


#--------------------------------------------------------------------------------------
# To parse the input command-line arguments
a_watched_keyword=`echo $* | perl -p -i -e "s%(.*)(--watched-keyword=)(.*)%\2\3%g"`
args=`echo $* | perl -p -i -e "s%(.*)--watched-keyword=.*%\1%g"`
for arg in ${args} ;  do
    echo ${arg}
    if [ `echo ${arg} | grep --regexp='--hostfile='` ]; then
        a_hostfile=`echo ${arg} | awk "-F=" '{print $2}'`
    fi  
    if [ `echo ${arg} | grep --regexp='--number-nodes='` ]; then
        a_number_nodes=`echo ${arg} | awk "-F=" '{print $2}'`
    fi  
    
    if [ `echo ${arg} | grep --regexp='--booked'` ]; then
        a_study_booked=${arg}
    fi  
    if [ `echo ${arg} | grep --regexp='--study-name='` ]; then
        a_study_name=${arg}
    fi  
    if [ `echo ${arg} | grep --regexp='--upload-seed-size='` ]; then
        an_upload_seed_size=${arg}
    fi  
    
    if [ `echo ${arg} | grep --regexp='--watched-timeout='` ]; then
        a_watched_timeout=${arg}
    fi  
    if [ `echo ${arg} | grep --regexp='--finish-hook='` ]; then
        a_finish_hook=${arg}
    fi  
done


#--------------------------------------------------------------------------------------
set -x
# Comment this section if you use referenced OpenFOAM solvers
# (just name 'application' variable after the solver)

# To compile solver for each of the cluster node independandtly
# (sometimes there are problems in launching executable compiled 
# on a master node no the slave nodes)
for a_host in `cat ${a_hostfile} | sed -e "s%slots=.*%%g"` ; do 
    ssh ${a_host} ". /etc/profile && ${a_cur_dir}/code/Allwclean" ;
    ssh ${a_host} ". /etc/profile && ${a_cur_dir}/code/Allwmake" ;
done
cloudflu-study-upload ${a_cur_dir}/0 ${a_cur_dir}/code \
    ${a_study_booked} ${a_study_name} ${an_upload_seed_size}

# Get application name
export application=`${a_cur_dir}/code/Allwmake`
if [ ${application} == "ERROR" ] ; then
    exit -1
fi


#--------------------------------------------------------------------------------------
setDamBreakFine ()
{
    blockMeshDict="constant/polyMesh/blockMeshDict"
    controlDict="system/controlDict"
    sed \
    -e s/"23 8"/"46 10"/g \
    -e s/"19 8"/"40 10"/g \
    -e s/"23 42\(.*\) 1 1)"/"46 76\1 2 1)"/g \
    -e s/"4 42\(.*\) 1 1)"/"4 76\1 2 1)"/g \
    -e s/"19 42\(.*\) 1 1)"/"40 76\1 2 1)"/g \
    ${blockMeshDict} > temp.$$
    mv temp.$$ ${blockMeshDict}
    sed \
    -e s/"\(deltaT[ \t]*\) 0.001;"/"\1 5e-04;"/g \
    -e s/"\(endTime[ \t]*\) 0.9;"/"\1 0.9;"/g \
    ${controlDict} > temp.$$
    mv temp.$$ ${controlDict}
}
setDamBreakFine

runApplication blockMesh
cloudflu-study-upload ${a_cur_dir}/constant ${a_cur_dir}/log.blockMesh \
    ${a_study_booked} ${a_study_name} ${an_upload_seed_size}

runApplication setFields
cloudflu-study-upload ${a_cur_dir}/0 ${a_cur_dir}/log.setFields \
    ${a_study_booked} ${a_study_name} ${an_upload_seed_size}


#--------------------------------------------------------------------------------------
a_slots=`python -c "import os; print os.sysconf( 'SC_NPROCESSORS_ONLN' )"`
a_number_processors=`python -c "print ${a_number_nodes} * ${a_slots}"`
weights=`python -c "print tuple( [ 1 for an_id in range( ${a_number_processors} ) ] )"`
processorWeights=`echo ${weights} | sed -e "s%,%%g"`

cat > ${a_cur_dir}/system/decomposeParDict <<EOF
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      decomposeParDict;
}
numberOfSubdomains ${a_number_processors};
method scotch;
scotchCoeffs
{
    processorWeights ${processorWeights};
}
EOF

runApplication decomposePar
cloudflu-study-upload ${a_cur_dir}/system ${a_cur_dir}/log.decomposePar \
    ${a_study_booked} ${a_study_name} ${an_upload_seed_size}


#--------------------------------------------------------------------------------------
# To prepare a specific "launcher.sh" for this application
# to secure that it is run in proper environment
echo \#!/usr/bin/env bash > ${a_cur_dir}/launcher.sh
echo source /etc/profile >> ${a_cur_dir}/launcher.sh
echo ${application} -case ${a_cur_dir} -parallel >> ${a_cur_dir}/launcher.sh
chmod 755 ${a_cur_dir}/launcher.sh

cloudflu-study-upload ${a_cur_dir}/launcher.sh \
    ${a_study_booked} ${a_study_name} ${an_upload_seed_size}


#--------------------------------------------------------------------------------------
# Run the 'application' as well as timestamps watcher
cloudflu-timestamps-upload \
    "mpirun --hostfile ${a_hostfile} -np ${a_number_processors} ${a_cur_dir}/launcher.sh" \
    ${a_study_booked} ${a_study_name} ${an_upload_seed_size} --solver-log="log.solver" \
    ${a_watched_keyword} ${a_watched_timeout} ${a_finish_hook}


#--------------------------------------------------------------------------------------
