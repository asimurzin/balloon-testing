#!/bin/bash

#--------------------------------------------------------------------------------------
## Copyright 2010 Alexey Petrov
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## Author : Andrey Simurzin
##


#-----------------------------------------------------------------------------------------
cd ${0%/*} || exit 1 # run from this directory
source ./ec2.sh


#-----------------------------------------------------------------------------------------
test_hook()
{
  echo "********************************************************************************"
  echo $0

  prepare_reservation ${instance_type} && a_reservation=`get_result`
  process_script "echo '${a_reservation}' | balloon-openmpi-config | balloon-nfs-config"

  process_script "echo '${a_reservation}' | balloon-instance-extract" && an_instance=`get_result`
  process_script "echo ${an_instance} | balloon-credentials-deploy | balloon-deploy --production --url='${__CLOUDFLU_DEPLOY_URL__}'"

  # process_script "balloon-study-book | tee >(balloon-solver-process --output-dir='damBreak.out') | balloon-solver-start <(echo '${a_reservation}') --case-dir='damBreak'"
  # Because of 'tee' utility runs its subprocesses in asynchronic way, to assure the accomplishement of the whole porcess tree, 
  # 'pipe' notion is used (mkfifo creates a named 'pipe')
  process_script "mkfifo $$ && balloon-study-book | tee >(balloon-solver-process --output-dir='damBreak.out' >$$) | balloon-solver-start <(echo '${a_reservation}') --case-dir='damBreak' | cat $$ && rm $$"
  echo '----------------------------------- OK -----------------------------------------'
}


#-----------------------------------------------------------------------------------------
run_script test_hook


#-----------------------------------------------------------------------------------------
